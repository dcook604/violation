"""Add unit_profiles table

Revision ID: 893169bd5579
Revises: b7b558b58f31
Create Date: 2025-05-05 14:46:53.617605

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '893169bd5579'
down_revision: Union[str, None] = 'b7b558b58f31'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('unit_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('unit_number', sa.String(length=50), nullable=False),
    sa.Column('strata_lot_number', sa.String(length=50), nullable=True),
    sa.Column('owner_first_name', sa.String(length=100), nullable=False),
    sa.Column('owner_last_name', sa.String(length=100), nullable=False),
    sa.Column('owner_email', sa.String(length=255), nullable=False),
    sa.Column('owner_telephone', sa.String(length=50), nullable=False),
    sa.Column('owner_mailing_address', sa.Text(), nullable=True),
    sa.Column('parking_stall_numbers', sa.String(length=255), nullable=True),
    sa.Column('bike_storage_numbers', sa.String(length=255), nullable=True),
    sa.Column('has_dog', sa.Boolean(), nullable=True),
    sa.Column('has_cat', sa.Boolean(), nullable=True),
    sa.Column('is_rented', sa.Boolean(), nullable=True),
    sa.Column('tenant_first_name', sa.String(length=100), nullable=True),
    sa.Column('tenant_last_name', sa.String(length=100), nullable=True),
    sa.Column('tenant_email', sa.String(length=255), nullable=True),
    sa.Column('tenant_telephone', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('unit_number'),
    if_not_exists=True
    )
    op.alter_column('user_sessions', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('current_timestamp()'))
    op.alter_column('user_sessions', 'last_activity',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('current_timestamp()'))
    op.alter_column('user_sessions', 'is_active',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True,
               existing_server_default=sa.text('1'))
    # op.drop_index('idx_session_expires', table_name='user_sessions') # Commented out: Index does not exist
    # op.drop_index('idx_session_user_id', table_name='user_sessions') # Commented out: Index needed for FK
    # op.drop_index('idx_access_log_token', table_name='violation_access_logs') # Commented out: Index does not exist
    # op.drop_index('idx_access_log_violation', table_name='violation_access_logs') # Commented out: Index needed for FK
    op.alter_column('violation_replies', 'created_at',
               existing_type=mysql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('current_timestamp()'))
    # op.drop_index('idx_reply_violation_email', table_name='violation_replies') # Commented out: Index needed for FK
    # op.drop_index('idx_status_log_violation', table_name='violation_status_log') # Commented out: Index needed for FK
    op.drop_index('idx_violation_public_id', table_name='violations')
    op.create_unique_constraint(None, 'violations', ['reference'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'violations', type_='unique')
    op.create_index('idx_violation_public_id', 'violations', ['public_id'], unique=True)
    # op.create_index('idx_status_log_violation', 'violation_status_log', ['violation_id'], unique=False) # Commented out: Index needed for FK
    # op.create_index('idx_reply_violation_email', 'violation_replies', ['violation_id', 'email'], unique=True) # Commented out: Index needed for FK
    op.alter_column('violation_replies', 'created_at',
               existing_type=sa.DateTime(),
               type_=mysql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('current_timestamp()'))
    # op.drop_index('idx_reply_violation_email', table_name='violation_replies') # Commented out: Index needed for FK
    # op.create_index('idx_access_log_token', 'violation_access_logs', ['token'], unique=False) # Commented out: Index does not exist
    # op.create_index('idx_session_user_id', 'user_sessions', ['user_id'], unique=False) # Commented out: Index needed for FK
    # op.create_index('idx_session_expires', 'user_sessions', ['expires_at'], unique=False) # Commented out: Index does not exist
    op.alter_column('user_sessions', 'is_active',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('user_sessions', 'last_activity',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('current_timestamp()'))
    op.alter_column('user_sessions', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('current_timestamp()'))
    op.drop_table('unit_profiles', if_exists=True)
    # ### end Alembic commands ###
